@using Par.CommandCenter.Application.Common.Utilities
<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />

    <title>PAR Command Notification</title>
    <style type="text/css">
        table {
            border: 1px solid #FFFFFF;
            border-collapse: collapse;
            margin: 0;
            padding: 0;
            table-layout: fixed;
            width: 100%;
        }

        tr.content-tr {
            border: 1px solid #FFFFFF;
            padding: 10px;
            background-color: #F2F2F2
        }

            tr.content-tr:nth-child(odd) {
                background-color: #E1F2EF
            }

        .head-tr {
            background-color: #0370BA;
            color: #FFFFFF;
        }

        .group-head {
            background-color: #C0C0C0;
            font-weight: bold;
        }

        .sub-group-head {
            background-color: #DCDCDC;
            text-indent: 1em;
            font-weight: bold;
        }

        .head-th {
            border: none;
            padding: 10px;
            font-size: larger;
        }

        td {
            border: 1px solid #FFFFFF;
            padding: 10px;
            text-align: left;
        }

        .border-separator {
            border-bottom: 4px solid #FFFFFF !important;
        }
    </style>
</head>
<body>
    <table>
        <thead>
            <tr class="head-tr">
                <th class="head-th">
                    <span>PAR Command Notification</</span>
                    <br />
                </th>
            </tr>
        </thead>
    </table>
    <br />
    <table>
        <tr>
            <td>
                <span class="h3">@Model.Description</span>
                <span>Click <a href="@Model.ReferenceURL">HERE</a> to view in Par Command</span>
            </td>
        </tr>
    </table>
    <br />
    <table>
        <thead>
            <tr class="head-tr">
                <th class="head-th">
                    @Model.DisplayName
                </th>
            </tr>
        </thead>
    </table>
    @if (@Model.HealthCheckRouters.Any())
    {
        var routers = @Model.HealthCheckRouters;
        var type = routers.FirstOrDefault().GetType();
        <table>
            <tr>
                <td colspan="2" class="group-head">
                    <span class="h3">@DateTime.Now.ToString("dddd, MMMM, d, yyyy")</span>
                </td>
            </tr>
            @foreach (var group in routers.GroupBy(x => x.TenantName))
            {
                <tr>
                    <td colspan="2" class="sub-group-head">
                        <span>Tenant Name: @group.Key</span>
                    </td>
                </tr>
                foreach (var router in group)
                {
                    <tr class="content-tr">
                        <td width="40%">
                            @AttributeHelper.GetPropertyDisPlayName(type, "RouterAdress")
                        </td>
                        <td width="60%">
                            @router.RouterAdress
                        </td>
                    </tr>
                    <tr class="content-tr">
                        <td width="40%">
                            @AttributeHelper.GetPropertyDisPlayName(type, "LastCommunication")
                        </td>
                        @if (router.LastCommunication.Value == DateTimeOffset.MinValue)
                        {
                            <td width="60%">
                                @DateTime.MinValue.ToString("MM/dd/yyyy h:mm tt")
                            </td>
                        }
                        else
                        {
                            <td width="60%">
                                @(router.LastCommunication.Value.ToOffset(TimeZoneInfo.FindSystemTimeZoneById("Eastern Standard Time").BaseUtcOffset).ToString("MM/dd/yyyy h:mm tt")
                            </td>
                        }
                    </tr>
                    <tr class="content-tr">
                        <td width="40%">
                            @AttributeHelper.GetPropertyDisPlayName(type, "LastReboot")
                        </td>
                        @if (router.LastReboot.Value == DateTimeOffset.MinValue)
                        {
                            <td width="60%">
                                @DateTime.MinValue.ToString("MM/dd/yyyyy h:mm tt")
                            </td>
                        }
                        else
                        {
                            <td width="60%">
                                @(router.LastReboot.Value.ToOffset(TimeZoneInfo.FindSystemTimeZoneById("Eastern Standard Time").BaseUtcOffset).ToString("MM/dd/yyyy h:mm tt")
                            </td>
                        }
                    </tr>
                    <tr class="content-tr">
                        <td width="40%">
                            @AttributeHelper.GetPropertyDisPlayName(type, "Status")
                        </td>
                        <td width="60%">
                            @router.Status
                        </td>
                    </tr>
                    <tr class="content-tr">
                        <td class="border-separator" width="40%">
                            Status Date
                        </td>
                        <td class="border-separator" width="60%">
                            @TimeZoneInfo.ConvertTimeFromUtc(router.Modified.Value, TimeZoneInfo.FindSystemTimeZoneById("Eastern Standard Time")).ToString("MM/dd/yyyy h:mm tt")
                        </td>
                    </tr>
                }
            }
            <tr class="content-tr">
                <td colspan="2">
                    <span>Total Routers Outages: @routers.Count()</span>
                </td>
            </tr>
        </table>
    }
</body>
</html>
